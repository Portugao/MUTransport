<?php
/**
 * MUTicket.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUTicket
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.3 (http://modulestudio.de) at Tue Oct 11 10:27:49 CEST 2011.
 */

/**
 * Generic item list block class
 */

class MUTransport_Block_ModuleMix extends Zikula_Controller_AbstractBlock {
    /**
     * Initialise the block
     */
    public function init()
    {
        SecurityUtil::registerPermissionSchema('MUTransport:ModuleMixBlock:', 'Block title::');
    }

    /**
     * Get information on the block
     *
     * @return       array       The block information
     */
    public function info()
    {
        $requirementMessage = '';
        // check if the module is available at all
        if (!ModUtil::available('MUTransport')) {
            $requirementMessage .= $this->__('Notice: This block will not be displayed until you activate the MUTransport module.');
        }

        return array('module'          => 'MUTransport',
            'text_type'       => $this->__('Module Mix'),
            'text_type_long'  => $this->__('Show different Module Content.'),
            'allow_multiple'  => true,
            'form_content'    => false,
            'form_refresh'    => false,
            'show_preview'    => true,
            'admin_tableless' => true,
            'requirement'     => $requirementMessage);
    }

    /**
     * Display the block
     *
     * @param        array       $blockinfo a blockinfo structure
     * @return       output      the rendered block
     */
    public function display($blockinfo)
    {
        // only show block content if the user has the required permissions
        if (!SecurityUtil::checkPermission('MUTransport:ModuleMixBlock:', "$blockinfo[title]::", ACCESS_OVERVIEW)) {
            return false;
        }
        
        // get current block content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);

        // check if the module is available at all
        if (!ModUtil::available('MUTransport')) {
            return false;
        }
        
        if ($vars['news'] == 1 ) {
        
        // check if the module news is available at all
        if (!ModUtil::available('News')) {
        	return LogUtil::registerError($this->__('Sorry. The module News is not available!'));
        }
        // get the news
        else {
        	$newsitems = ModUtil::apiFunc('News', 'user', 'getall');
        }
        
        if (is_array($newsitems)) {
        	$newsitems = array_slice($newsitems, 0, $vars['newsamount']);
        }
        }
        
        if ($vars['comments'] == 1) {
        
            // check if the module ezcomments is available at all
        if (!ModUtil::available('EZComments')) {
        	return LogUtil::registerError($this->__('Sorry. The module EZComments is not available!'));
        }
        // get the comments
        else {
        	$ezcommentsitems = ModUtil::apiFunc('EZComments', 'user', 'getall');
        }

        if (is_array($ezcommentsitems)) {
        	$ezcommentsitems = array_slice($ezcommentsitems, 0, $vars['commentsamount']);
        }
        }

        $this->view->setCaching(true);

        // assign block vars and fetched data
        if ($vars['news'] == 1) {
        	$this->view->assign('newsitems', $newsitems);
        }
        
        if ($vars['comments'] == 1) {
        	$this->view->assign('ezcommentsitems', $ezcommentsitems);
        }

        // set a block title
        if (empty($blockinfo['title'])) {
            $blockinfo['title'] = $this->__('MUTransport Module Mix');
        }

        $blockinfo['content'] = $this->view->fetch('block/modulemix.tpl');

        // return the block to the theme
        return BlockUtil::themeBlock($blockinfo);
    }

    /**
     * Modify block settings
     *
     * @param        array       $blockinfo a blockinfo structure
     * @return       output      the block form
     */
    public function modify($blockinfo)
    {
   
        // get current block content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);
        $vars['bid'] = $blockinfo['bid'];
        
        $newsavailable = ModUtil::available('News');
        $ezcommentsavailable = ModUtil::available('EZComments');

        // set default values for all params which are not properly set
        if (!isset($vars['news']) || empty($vars['news'])) {
            $vars['news'] = 0;
        }
        if (!isset($vars['newsamount']) || empty($vars['newsamount'])) {
            $vars['newsamount'] = 5;
        }
        if (!isset($vars['comments']) || empty($vars['comments'])) {
            $vars['comments'] = 0;
        }
        if (!isset($vars['commentsamount']) || empty($vars['commentsamount'])) {
            $vars['commentsamount'] = 5;
        }

        $this->view->setCaching(false);

        // assign the approriate values
        $this->view->assign($vars);
        
        // assign special vars
        $this->view->assign('newsavailable',$newsavailable);
        $this->view->assign('ezcommentsavailable',$ezcommentsavailable);

        // clear the block cache
        $this->view->clear_cache('block/modulemix.tpl');
 
        // Return the output that has been generated by this function
        return $this->view->fetch('block/modulemix_modify.tpl');
    }

    /**
     * Update block settings
     *
     * @param        array       $blockinfo a blockinfo structure
     * @return       $blockinfo  the modified blockinfo structure
     */
    public function update($blockinfo)
    {
        // Get current content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);

        $vars['news'] = $this->request->getPost()->filter('news', 2 , FILTER_SANITIZE_NUMBER_INT);
        $vars['newsamount'] = $this->request->getPost()->filter('newsamount', 5 , FILTER_SANITIZE_NUMBER_INT);
        $vars['comments'] = $this->request->getPost()->filter('comments', 2 , FILTER_SANITIZE_NUMBER_INT);
        $vars['commentsamount'] = $this->request->getPost()->filter('commentsamount', 5 , FILTER_SANITIZE_NUMBER_INT);

        // write back the new contents
        $blockinfo['content'] = BlockUtil::varsToContent($vars);

        // clear the block cache
        $this->view->clear_cache('block/modulemix.tpl');

        return $blockinfo;
    }
    
    /**
     * 
     * Enter description here ...
     */
    
    private function generateContent() {
    	
    	
    	
    }

}
