<?php
/**
 * MUTicket.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUTicket
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.3 (http://modulestudio.de) at Tue Oct 11 10:27:49 CEST 2011.
 */

/**
 * Generic item list block class
 */

class MUTransport_Block_RandomHtml extends Zikula_Controller_AbstractBlock {
    /**
     * Initialise the block
     */
    public function init()
    {
        SecurityUtil::registerPermissionSchema('MUTransport:RandomHtmlBlock:', 'Block title::');
    }

    /**
     * Get information on the block
     *
     * @return       array       The block information
     */
    public function info()
    {
        $requirementMessage = '';
        // check if the module is available at all
        if (!ModUtil::available('MUTransport')) {
            $requirementMessage .= $this->__('Notice: This block will not be displayed until you activate the MUTransport module.');
        }

        return array('module'          => 'MUTransport',
            'text_type'       => $this->__('Random Html'),
            'text_type_long'  => $this->__('Show random Html Blocks.'),
            'allow_multiple'  => true,
            'form_content'    => false,
            'form_refresh'    => false,
            'show_preview'    => true,
            'admin_tableless' => true,
            'requirement'     => $requirementMessage);
    }

    /**
     * Display the block
     *
     * @param        array       $blockinfo a blockinfo structure
     * @return       output      the rendered block
     */
    public function display($blockinfo)
    {
        // only show block content if the user has the required permissions
        if (!SecurityUtil::checkPermission('MUTransport:RandomHtmlBlock:', "$blockinfo[title]::", ACCESS_OVERVIEW)) {
            return false;
        }
        
        // check if the module is available at all
        if (!ModUtil::available('MUTransport')) {
            return false;
        }
        
        // get the content of html blocks
        $html = $this->getHtmlBlocksContent();
        
        // put the content column in an array
        foreach($html as $key => $value) {
        	$content[$key] = $value['content'];
        }
        // we count the number of issues
        $count = count($content);
        
        // we take one by rand
        $die = rand(0, $count-1);
        
        // we take the content after dicing
        $htmlcontent = $content[$die];

        $this->view->setCaching(true);

        // assign block vars and fetched data
        $this->view->assign('htmlcontent', $htmlcontent);

        // set a block title
        if (empty($blockinfo['title'])) {
            $blockinfo['title'] = $this->__('Module Mix');
        }
        
        //$blockinfo['content'] = $htmlcontent;

        $blockinfo['content'] = $this->view->fetch('block/randomhtml.tpl');

        // return the block to the theme
        return BlockUtil::themeBlock($blockinfo);
    }

    /**
     * Modify block settings
     *
     * @param        array       $blockinfo a blockinfo structure
     * @return       output      the block form
     */
    public function modify($blockinfo)
    {
   
        // get current block content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);
        $vars['bid'] = $blockinfo['bid'];
        
       /* $html = $this->getHtmlBlocksContent();

        // set default values for all params which are not properly set
        if (!isset($vars['News']) || empty($vars['News'])) {
            $vars['News'] = 0;
        }
        if (!isset($vars['EzComments']) || empty($vars['EZComments'])) {
            $vars['EZComments'] = 0;
        }*/

        $this->view->setCaching(false);

        // assign the approriate values
        $this->view->assign($vars);

        // clear the block cache
        $this->view->clear_cache('block/randomhtml.tpl');
 
        // Return the output that has been generated by this function
        return $this->view->fetch('block/randomhtml_modify.tpl');
    }

    /**
     * Update block settings
     *
     * @param        array       $blockinfo a blockinfo structure
     * @return       $blockinfo  the modified blockinfo structure
     */
    public function update($blockinfo)
    {
        // Get current content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);

       /* $vars['News'] = $this->request->getPost()->filter('news', '2', FILTER_SANITIZE_NUMBER_INT);
        $vars['EZComments'] = $this->request->getPost()->filter('ezcomments', 'default', FILTER_SANITIZE_NUMBER_INT);


        // write back the new contents
        $blockinfo['content'] = BlockUtil::varsToContent($vars);*/

        // clear the block cache
        $this->view->clear_cache('block/modulemix.tpl');

        return $blockinfo;
    }
    
    private function getHtmlBlocksContent() {
        // get the content of html blocks

		$where .= 'bkey = \'' . DataUtil::formatForStore('Html') . '\'';
		$column = array('title', 'content');
        $html = DBUtil::selectObjectArray('blocks',$where);
		//$html = DBUtil::marshallObjects($html);
        return $html;
    	
    }

}
