<?php
/**
 * Transport.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\TransportModule\Controller;

use MU\TransportModule\Controller\Base\AbstractFieldController;

use RuntimeException;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Zikula\ThemeModule\Engine\Annotation\Theme;
use MU\TransportModule\Entity\FieldEntity;
use PDO;

/**
 * Field controller class providing navigation and interaction functionality.
 */
class FieldController extends AbstractFieldController
{
    /**
     * @inheritDoc
     *
     * @Route("/admin/fields/view/{sort}/{sortdir}/{pos}/{num}.{_format}",
     *        requirements = {"sortdir" = "asc|desc|ASC|DESC", "pos" = "\d+", "num" = "\d+", "_format" = "html"},
     *        defaults = {"sort" = "", "sortdir" = "asc", "pos" = 1, "num" = 10, "_format" = "html"},
     *        methods = {"GET"}
     * )
     * @Theme("admin")
     */
    public function adminViewAction(Request $request, $sort, $sortdir, $pos, $num)
    {
        return parent::adminViewAction($request, $sort, $sortdir, $pos, $num);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/fields/view/{sort}/{sortdir}/{pos}/{num}.{_format}",
     *        requirements = {"sortdir" = "asc|desc|ASC|DESC", "pos" = "\d+", "num" = "\d+", "_format" = "html"},
     *        defaults = {"sort" = "", "sortdir" = "asc", "pos" = 1, "num" = 10, "_format" = "html"},
     *        methods = {"GET"}
     * )
     */
    public function viewAction(Request $request, $sort, $sortdir, $pos, $num)
    {
        return parent::viewAction($request, $sort, $sortdir, $pos, $num);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/admin/field/delete/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     * @Theme("admin")
     */
    public function adminDeleteAction(Request $request, $id)
    {
        return parent::adminDeleteAction($request, $id);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/field/delete/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     */
    public function deleteAction(Request $request, $id)
    {
        return parent::deleteAction($request, $id);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/admin/field/edit/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"id" = "0", "_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     * @Theme("admin")
     */
    public function adminEditAction(Request $request)
    {
        return parent::adminEditAction($request);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/field/edit/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"id" = "0", "_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     */
    public function editAction(Request $request)
    {
        return parent::editAction($request);
    }
    
    /**
     * @inheritDoc
     * @Route("/admin/fields/handleSelectedEntries",
     *        methods = {"POST"}
     * )
     * @Theme("admin")
     */
    public function adminHandleSelectedEntriesAction(Request $request)
    {
        return parent::adminHandleSelectedEntriesAction($request);
    }
    
    /**
     * @inheritDoc
     * @Route("/fields/handleSelectedEntries",
     *        methods = {"POST"}
     * )
     */
    public function handleSelectedEntriesAction(Request $request)
    {
        return parent::handleSelectedEntriesAction($request);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/admin/fields/getFields",
     *        methods = {"GET", "POST"}
     * )
     * @Theme("admin")
     *
     * @param Request $request Current request instance
     *
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function adminGetFieldsAction(Request $request)
    {
    	return parent::adminGetFieldsAction($request);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/fields/getFields",
     *        methods = {"GET", "POST"}
     * )
     *
     * @param Request $request Current request instance
     *
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function getFieldsAction(Request $request)
    {
    	return parent::getFieldsAction($request);
    }
    
    /**
     * This method includes the common implementation code for adminGetFields() and getFields().
     */
    protected function getFieldsInternal(Request $request, $isAdmin = false)
    {
    	// parameter specifying which type of objects we are treating
    	$objectType = 'field';
    	$permLevel = $isAdmin ? ACCESS_ADMIN : ACCESS_OVERVIEW;
    	if (!$this->hasPermission('MUTransportModule:' . ucfirst($objectType) . ':', '::', $permLevel)) {
    		throw new AccessDeniedException();
    	}
    
    	$templateParameters = [
    			'routeArea' => $isAdmin ? 'admin' : ''
    	];
    	 
    	$controllerHelper = $this->get('mu_transport_module.controller_helper');
    	$modelHelper = $this->get('mu_transport_module.model_helper');
    	 
    	$tableId = $controllerHelper->getParameter('table');
    
    	$tableRepository = $modelHelper->getRepository('table');
    	$table = $tableRepository->findOneBy(array('id' => $tableId));
    	$database = $table['database'];
    
    	$conn = new \PDO('mysql:dbname=' . $database['dbName'] . ';host=' . $database['host'], $database['dbUser'], $database['dbPassword']);
    	$statement = $conn->query('DESCRIBE ' . $table['name']);
    	$result = $statement->fetchAll(PDO::FETCH_ASSOC);
    	 
    	$count = 0;
    	 
    	foreach ($result as $field) {
    		$newField = new FieldEntity();
    		$newField->setFieldName($field['Field']);
    		if ($field['Key'] != '') {
    			$newField->setFieldKey($field['Key']);
    		} else {
    			$newField->setFieldKey('');
    		}
    		$pos = strpos($field['Type'], '(');
    		if ($pos != false) {
    			$length = strstr($field['Type'], '(');
    			$length = str_replace('(', '', $length);
    			$length = str_replace(')', '', $length);
    			if ($length != '') {
    				$newField->setFieldLength($length);
    			} else {
    				$newField->setFieldLength('');
    			}
    			$type = explode('(', $field['Type']);
    			$newField->setFieldType($type[0]);
    		} else {
    			$newField->setFieldType($field['Type']);
    		}
    		if ($field['Default'] != '') {
    			$newField->setFieldDefault($field['Default']);
    		} else {
    			$newField->setFieldDefault('');
    		}
    		if ($field['Null'] != '') {
    			$newField->setFieldNull($field['Null']);
    		} else {
    			$newField->setFieldNull('');
    		}
    		if ($field['Extra'] != '') {
    			$newField->setFieldExtra($field['Extra']);
    		} else {
    			$newField->setFieldExtra('');
    		}
    		$newField->setTable($table);
    		$newField->setWorkflowState('approved');
    		$this->getDoctrine()->getManager()->persist($newField);
    		$this->getDoctrine()->getManager()->flush();
    
    		$count++;
    		$fieldList[] = $field;
    	}
    	$templateParameters['fields'] = $fieldList;
    	$templateParameters['count'] = $count;
    
    	// return template
    	return $this->render('@MUTransportModule/Field/getFields.html.twig', $templateParameters);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/admin/fields/copyValuesFromDatabaseToDatabase",
     *        methods = {"GET", "POST"}
     * )
     * @Theme("admin")
     *
     * @param Request $request Current request instance
     *
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function adminCopyValuesFromDatabaseToDatabaseAction(Request $request)
    {
    	return parent::adminCopyValuesFromDatabaseToDatabaseAction($request);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/fields/copyValuesFromDatabaseToDatabase",
     *        methods = {"GET", "POST"}
     * )
     *
     * @param Request $request Current request instance
     *
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function copyValuesFromDatabaseToDatabaseAction(Request $request)
    {
    	return parent::copyValuesFromDatabaseToDatabaseAction($request);
    }

    // feel free to add your own controller methods here
}
