<?php
/**
 * Transport.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\TransportModule\Form\Type\Base;

use Symfony\Component\Form\AbstractType;

use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormBuilderInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use MU\TransportModule\Entity\Factory\EntityFactory;
use MU\TransportModule\Helper\ControllerHelper;


/**
 * Database selection form type base class.
 */
abstract class AbstractTableselectType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var EntityFactory
     */
    protected $entityFactory;
    
    /**
     * @var ControllerHelper
     */
    protected $controllerHelper;

    /**
     * DatabaseType constructor.
     *
     * @param TranslatorInterface $translator    Translator service instance
     * @param EntityFactory $entityFactory EntityFactory service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        EntityFactory $entityFactory,
    	ControllerHelper $controllerHelper
    ) {
        $this->setTranslator($translator);
        $this->entityFactory = $entityFactory;
        $this->controllerHelper = $controllerHelper;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

   /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addListViewsFields($builder, $options);

        $builder
            ->add('select', SubmitType::class, [
                'label' => $this->__('Select and go further'),
                'icon' => 'fa-check',
                'attr' => [
                    'class' => 'btn btn-success'
                ]
            ])
            ->add('cancel', SubmitType::class, [
                'label' => $this->__('Cancel'),
                'icon' => 'fa-times',
                'attr' => [
                    'class' => 'btn btn-default',
                    'formnovalidate' => 'formnovalidate'
                ]
            ])
        ;
    }

    /**
     * Adds fields for list views fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addListViewsFields(FormBuilderInterface $builder, array $options)
    {
    	// we get the source tables
    	$source = $this->controllerHelper->getParameter('source');
    	$tableRepository = $this->entityFactory->getRepository('table');
    	$where = 'tbl.database = ' . $source;
    	$listEntries = $tableRepository->selectWhere($where);
    	$choices = [];
    	$choiceAttributes = [];
    	foreach ($listEntries as $entry) {
    		$choices[$entry['name']] = $entry['id'];
    		$choiceAttributes[$entry['text']] = ['title' => $entry['title']];
    	}
    	// we get the target tables
    	$target = $this->controllerHelper->getParameter('target');
    	$databaseRepository = $this->entityFactory->getRepository('table');
    	$where2 = 'tbl.database = ' . $target;
    	$listEntries2 = $databaseRepository->selectWhere($where2);
    	$choices2 = [];
    	$choiceAttributes2 = [];
    	foreach ($listEntries2 as $entry) {
    		$choices2[$entry['name']] = $entry['id'];
    		$choiceAttributes2[$entry['text']] = ['title' => $entry['title']];
    	}
    	$builder
            ->add('sourceTable', ChoiceType::class, [
                'label' => $this->__('Source selection') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Here you can select a table as source.')
                ],
                'help' => $this->__('Table selection.'),
                'data' => isset($this->moduleVars['thumbnailModeAlbumUploadCover']) ? $this->moduleVars['thumbnailModeAlbumUploadCover'] : '',
                'empty_data' => 'inset',
                'attr' => [
                    'title' => $this->__('Choose the source database.')
                ],'choices' => $choices,
                'choices_as_values' => true,
                'choice_attr' => $choiceAttributes,
                'multiple' => false
            ])   	 
    	    
            ->add('targetTable', ChoiceType::class, [
            		'label' => $this->__('Target selection') . ':',
            		'label_attr' => [
            				'class' => 'tooltips',
            				'title' => $this->__('Here you can select a table as target.')
            		],
            		'help' => $this->__('Table selection.'),
            		'data' => isset($this->moduleVars['thumbnailModeAlbumUploadCover']) ? $this->moduleVars['thumbnailModeAlbumUploadCover'] : '',
            		'empty_data' => 'inset',
            		'attr' => [
            				'title' => $this->__('Choose the thumbnail mode.')
            		],'choices' => $choices2,
            		'choices_as_values' => true,
            		'choice_attr' => $choiceAttributes2,
            		'multiple' => false
            ])
            ;
    }

    /**
     * @inheritDoc
     */
    public function getBlockPrefix()
    {
        return 'mutransportmodule_transport';
    }
}
