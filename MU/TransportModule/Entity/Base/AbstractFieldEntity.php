<?php
/**
 * Transport.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\TransportModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use MU\TransportModule\Traits\StandardFieldsTrait;
use MU\TransportModule\Validator\Constraints as TransportAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for field entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractFieldEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'field';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @TransportAssert\ListEntry(entityName="field", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $fieldName
     */
    protected $fieldName = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $fieldKey
     */
    protected $fieldKey = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $fieldType
     */
    protected $fieldType = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $fieldLength
     */
    protected $fieldLength = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $fieldNull
     */
    protected $fieldNull = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $fieldDefault
     */
    protected $fieldDefault = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $fieldExtra
     */
    protected $fieldExtra = '';
    
    
    /**
     * Bidirectional - Many fields [fields] are linked by one table [table] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="MU\TransportModule\Entity\TableEntity", inversedBy="fields")
     * @ORM\JoinTable(name="mu_transport_table")
     * @Assert\Type(type="MU\TransportModule\Entity\TableEntity")
     * @var \MU\TransportModule\Entity\TableEntity $table
     */
    protected $table;
    
    
    /**
     * FieldEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the field name.
     *
     * @return string
     */
    public function getFieldName()
    {
        return $this->fieldName;
    }
    
    /**
     * Sets the field name.
     *
     * @param string $fieldName
     *
     * @return void
     */
    public function setFieldName($fieldName)
    {
        if ($this->fieldName !== $fieldName) {
            $this->fieldName = isset($fieldName) ? $fieldName : '';
        }
    }
    
    /**
     * Returns the field key.
     *
     * @return string
     */
    public function getFieldKey()
    {
        return $this->fieldKey;
    }
    
    /**
     * Sets the field key.
     *
     * @param string $fieldKey
     *
     * @return void
     */
    public function setFieldKey($fieldKey)
    {
        if ($this->fieldKey !== $fieldKey) {
            $this->fieldKey = isset($fieldKey) ? $fieldKey : '';
        }
    }
    
    /**
     * Returns the field type.
     *
     * @return string
     */
    public function getFieldType()
    {
        return $this->fieldType;
    }
    
    /**
     * Sets the field type.
     *
     * @param string $fieldType
     *
     * @return void
     */
    public function setFieldType($fieldType)
    {
        if ($this->fieldType !== $fieldType) {
            $this->fieldType = isset($fieldType) ? $fieldType : '';
        }
    }
    
    /**
     * Returns the field length.
     *
     * @return string
     */
    public function getFieldLength()
    {
        return $this->fieldLength;
    }
    
    /**
     * Sets the field length.
     *
     * @param string $fieldLength
     *
     * @return void
     */
    public function setFieldLength($fieldLength)
    {
        if ($this->fieldLength !== $fieldLength) {
            $this->fieldLength = isset($fieldLength) ? $fieldLength : '';
        }
    }
    
    /**
     * Returns the field null.
     *
     * @return string
     */
    public function getFieldNull()
    {
        return $this->fieldNull;
    }
    
    /**
     * Sets the field null.
     *
     * @param string $fieldNull
     *
     * @return void
     */
    public function setFieldNull($fieldNull)
    {
        if ($this->fieldNull !== $fieldNull) {
            $this->fieldNull = isset($fieldNull) ? $fieldNull : '';
        }
    }
    
    /**
     * Returns the field default.
     *
     * @return string
     */
    public function getFieldDefault()
    {
        return $this->fieldDefault;
    }
    
    /**
     * Sets the field default.
     *
     * @param string $fieldDefault
     *
     * @return void
     */
    public function setFieldDefault($fieldDefault)
    {
        if ($this->fieldDefault !== $fieldDefault) {
            $this->fieldDefault = isset($fieldDefault) ? $fieldDefault : '';
        }
    }
    
    /**
     * Returns the field extra.
     *
     * @return string
     */
    public function getFieldExtra()
    {
        return $this->fieldExtra;
    }
    
    /**
     * Sets the field extra.
     *
     * @param string $fieldExtra
     *
     * @return void
     */
    public function setFieldExtra($fieldExtra)
    {
        if ($this->fieldExtra !== $fieldExtra) {
            $this->fieldExtra = isset($fieldExtra) ? $fieldExtra : '';
        }
    }
    
    
    /**
     * Returns the table.
     *
     * @return \MU\TransportModule\Entity\TableEntity
     */
    public function getTable()
    {
        return $this->table;
    }
    
    /**
     * Sets the table.
     *
     * @param \MU\TransportModule\Entity\TableEntity $table
     *
     * @return void
     */
    public function setTable($table = null)
    {
        $this->table = $table;
    }
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array List of resulting arguments
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'mutransportmodule.ui_hooks.fields';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects Objects that are added to this array
     * 
     * @return array List of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = [])
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Field ' . $this->getKey() . ': ' . $this->getFieldName();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
