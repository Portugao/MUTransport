<?php
/**
 * Transport.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\TransportModule\Base;

/**
 * Events definition base class.
 */
abstract class AbstractTransportEvents
{
    /**
     * The mutransportmodule.table_post_load event is thrown when tables
     * are loaded from the database.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterTableEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const TABLE_POST_LOAD = 'mutransportmodule.table_post_load';
    
    /**
     * The mutransportmodule.table_pre_persist event is thrown before a new table
     * is created in the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterTableEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const TABLE_PRE_PERSIST = 'mutransportmodule.table_pre_persist';
    
    /**
     * The mutransportmodule.table_post_persist event is thrown after a new table
     * has been created in the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterTableEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const TABLE_POST_PERSIST = 'mutransportmodule.table_post_persist';
    
    /**
     * The mutransportmodule.table_pre_remove event is thrown before an existing table
     * is removed from the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterTableEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const TABLE_PRE_REMOVE = 'mutransportmodule.table_pre_remove';
    
    /**
     * The mutransportmodule.table_post_remove event is thrown after an existing table
     * has been removed from the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterTableEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const TABLE_POST_REMOVE = 'mutransportmodule.table_post_remove';
    
    /**
     * The mutransportmodule.table_pre_update event is thrown before an existing table
     * is updated in the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterTableEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const TABLE_PRE_UPDATE = 'mutransportmodule.table_pre_update';
    
    /**
     * The mutransportmodule.table_post_update event is thrown after an existing new table
     * has been updated in the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterTableEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const TABLE_POST_UPDATE = 'mutransportmodule.table_post_update';
    
    /**
     * The mutransportmodule.database_post_load event is thrown when databases
     * are loaded from the database.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterDatabaseEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const DATABASE_POST_LOAD = 'mutransportmodule.database_post_load';
    
    /**
     * The mutransportmodule.database_pre_persist event is thrown before a new database
     * is created in the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterDatabaseEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const DATABASE_PRE_PERSIST = 'mutransportmodule.database_pre_persist';
    
    /**
     * The mutransportmodule.database_post_persist event is thrown after a new database
     * has been created in the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterDatabaseEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const DATABASE_POST_PERSIST = 'mutransportmodule.database_post_persist';
    
    /**
     * The mutransportmodule.database_pre_remove event is thrown before an existing database
     * is removed from the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterDatabaseEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const DATABASE_PRE_REMOVE = 'mutransportmodule.database_pre_remove';
    
    /**
     * The mutransportmodule.database_post_remove event is thrown after an existing database
     * has been removed from the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterDatabaseEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const DATABASE_POST_REMOVE = 'mutransportmodule.database_post_remove';
    
    /**
     * The mutransportmodule.database_pre_update event is thrown before an existing database
     * is updated in the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterDatabaseEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const DATABASE_PRE_UPDATE = 'mutransportmodule.database_pre_update';
    
    /**
     * The mutransportmodule.database_post_update event is thrown after an existing new database
     * has been updated in the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterDatabaseEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const DATABASE_POST_UPDATE = 'mutransportmodule.database_post_update';
    
    /**
     * The mutransportmodule.field_post_load event is thrown when fields
     * are loaded from the database.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterFieldEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const FIELD_POST_LOAD = 'mutransportmodule.field_post_load';
    
    /**
     * The mutransportmodule.field_pre_persist event is thrown before a new field
     * is created in the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterFieldEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const FIELD_PRE_PERSIST = 'mutransportmodule.field_pre_persist';
    
    /**
     * The mutransportmodule.field_post_persist event is thrown after a new field
     * has been created in the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterFieldEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const FIELD_POST_PERSIST = 'mutransportmodule.field_post_persist';
    
    /**
     * The mutransportmodule.field_pre_remove event is thrown before an existing field
     * is removed from the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterFieldEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const FIELD_PRE_REMOVE = 'mutransportmodule.field_pre_remove';
    
    /**
     * The mutransportmodule.field_post_remove event is thrown after an existing field
     * has been removed from the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterFieldEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const FIELD_POST_REMOVE = 'mutransportmodule.field_post_remove';
    
    /**
     * The mutransportmodule.field_pre_update event is thrown before an existing field
     * is updated in the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterFieldEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const FIELD_PRE_UPDATE = 'mutransportmodule.field_pre_update';
    
    /**
     * The mutransportmodule.field_post_update event is thrown after an existing new field
     * has been updated in the system.
     *
     * The event listener receives an
     * MU\TransportModule\Event\FilterFieldEvent instance.
     *
     * @see MU\TransportModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const FIELD_POST_UPDATE = 'mutransportmodule.field_post_update';
    
}
