<?php
/**
 * Transport.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\TransportModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * The amount of tables shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $tableEntriesPerPage
     */
    protected $tableEntriesPerPage = 10;
    
    /**
     * The amount of databases shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $databaseEntriesPerPage
     */
    protected $databaseEntriesPerPage = 10;
    
    /**
     * The amount of fields shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $fieldEntriesPerPage
     */
    protected $fieldEntriesPerPage = 10;
    
    
    /**
     * AppSettings constructor.
     *
     * @param VariableApiInterface $variableApi VariableApi service instance
     */
    public function __construct(
        VariableApiInterface $variableApi
    ) {
        $this->variableApi = $variableApi;
    
        $this->load();
    }
    
    /**
     * Returns the table entries per page.
     *
     * @return integer
     */
    public function getTableEntriesPerPage()
    {
        return $this->tableEntriesPerPage;
    }
    
    /**
     * Sets the table entries per page.
     *
     * @param integer $tableEntriesPerPage
     *
     * @return void
     */
    public function setTableEntriesPerPage($tableEntriesPerPage)
    {
        if (intval($this->tableEntriesPerPage) !== intval($tableEntriesPerPage)) {
            $this->tableEntriesPerPage = intval($tableEntriesPerPage);
        }
    }
    
    /**
     * Returns the database entries per page.
     *
     * @return integer
     */
    public function getDatabaseEntriesPerPage()
    {
        return $this->databaseEntriesPerPage;
    }
    
    /**
     * Sets the database entries per page.
     *
     * @param integer $databaseEntriesPerPage
     *
     * @return void
     */
    public function setDatabaseEntriesPerPage($databaseEntriesPerPage)
    {
        if (intval($this->databaseEntriesPerPage) !== intval($databaseEntriesPerPage)) {
            $this->databaseEntriesPerPage = intval($databaseEntriesPerPage);
        }
    }
    
    /**
     * Returns the field entries per page.
     *
     * @return integer
     */
    public function getFieldEntriesPerPage()
    {
        return $this->fieldEntriesPerPage;
    }
    
    /**
     * Sets the field entries per page.
     *
     * @param integer $fieldEntriesPerPage
     *
     * @return void
     */
    public function setFieldEntriesPerPage($fieldEntriesPerPage)
    {
        if (intval($this->fieldEntriesPerPage) !== intval($fieldEntriesPerPage)) {
            $this->fieldEntriesPerPage = intval($fieldEntriesPerPage);
        }
    }
    
    
    /**
     * Loads module variables from the database.
     */
    protected function load()
    {
        $moduleVars = $this->variableApi->getAll('MUTransportModule');
    
        if (isset($moduleVars['tableEntriesPerPage'])) {
            $this->setTableEntriesPerPage($moduleVars['tableEntriesPerPage']);
        }
        if (isset($moduleVars['databaseEntriesPerPage'])) {
            $this->setDatabaseEntriesPerPage($moduleVars['databaseEntriesPerPage']);
        }
        if (isset($moduleVars['fieldEntriesPerPage'])) {
            $this->setFieldEntriesPerPage($moduleVars['fieldEntriesPerPage']);
        }
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save()
    {
        $this->variableApi->set('MUTransportModule', 'tableEntriesPerPage', $this->getTableEntriesPerPage());
        $this->variableApi->set('MUTransportModule', 'databaseEntriesPerPage', $this->getDatabaseEntriesPerPage());
        $this->variableApi->set('MUTransportModule', 'fieldEntriesPerPage', $this->getFieldEntriesPerPage());
    }
}
