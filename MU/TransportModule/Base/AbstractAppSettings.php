<?php
/**
 * Transport.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\TransportModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * The amount of tables shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $tableEntriesPerPage
     */
    protected $tableEntriesPerPage = 10;
    
    /**
     * The amount of databases shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $databaseEntriesPerPage
     */
    protected $databaseEntriesPerPage = 10;
    
    /**
     * The amount of fields shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $fieldEntriesPerPage
     */
    protected $fieldEntriesPerPage = 10;
    
    /**
     * Whether only own entries should be shown on view pages by default or not
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showOnlyOwnEntries
     */
    protected $showOnlyOwnEntries = false;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreatorForTable
     */
    protected $allowModerationSpecificCreatorForTable = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreationDateForTable
     */
    protected $allowModerationSpecificCreationDateForTable = false;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreatorForDatabase
     */
    protected $allowModerationSpecificCreatorForDatabase = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreationDateForDatabase
     */
    protected $allowModerationSpecificCreationDateForDatabase = false;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreatorForField
     */
    protected $allowModerationSpecificCreatorForField = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreationDateForField
     */
    protected $allowModerationSpecificCreationDateForField = false;
    
    
    /**
     * AppSettings constructor.
     *
     * @param VariableApiInterface $variableApi VariableApi service instance
     */
    public function __construct(
        VariableApiInterface $variableApi
    ) {
        $this->variableApi = $variableApi;
    
        $this->load();
    }
    
    /**
     * Returns the table entries per page.
     *
     * @return integer
     */
    public function getTableEntriesPerPage()
    {
        return $this->tableEntriesPerPage;
    }
    
    /**
     * Sets the table entries per page.
     *
     * @param integer $tableEntriesPerPage
     *
     * @return void
     */
    public function setTableEntriesPerPage($tableEntriesPerPage)
    {
        if (intval($this->tableEntriesPerPage) !== intval($tableEntriesPerPage)) {
            $this->tableEntriesPerPage = intval($tableEntriesPerPage);
        }
    }
    
    /**
     * Returns the database entries per page.
     *
     * @return integer
     */
    public function getDatabaseEntriesPerPage()
    {
        return $this->databaseEntriesPerPage;
    }
    
    /**
     * Sets the database entries per page.
     *
     * @param integer $databaseEntriesPerPage
     *
     * @return void
     */
    public function setDatabaseEntriesPerPage($databaseEntriesPerPage)
    {
        if (intval($this->databaseEntriesPerPage) !== intval($databaseEntriesPerPage)) {
            $this->databaseEntriesPerPage = intval($databaseEntriesPerPage);
        }
    }
    
    /**
     * Returns the field entries per page.
     *
     * @return integer
     */
    public function getFieldEntriesPerPage()
    {
        return $this->fieldEntriesPerPage;
    }
    
    /**
     * Sets the field entries per page.
     *
     * @param integer $fieldEntriesPerPage
     *
     * @return void
     */
    public function setFieldEntriesPerPage($fieldEntriesPerPage)
    {
        if (intval($this->fieldEntriesPerPage) !== intval($fieldEntriesPerPage)) {
            $this->fieldEntriesPerPage = intval($fieldEntriesPerPage);
        }
    }
    
    /**
     * Returns the show only own entries.
     *
     * @return boolean
     */
    public function getShowOnlyOwnEntries()
    {
        return $this->showOnlyOwnEntries;
    }
    
    /**
     * Sets the show only own entries.
     *
     * @param boolean $showOnlyOwnEntries
     *
     * @return void
     */
    public function setShowOnlyOwnEntries($showOnlyOwnEntries)
    {
        if (boolval($this->showOnlyOwnEntries) !== boolval($showOnlyOwnEntries)) {
            $this->showOnlyOwnEntries = boolval($showOnlyOwnEntries);
        }
    }
    
    /**
     * Returns the allow moderation specific creator for table.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreatorForTable()
    {
        return $this->allowModerationSpecificCreatorForTable;
    }
    
    /**
     * Sets the allow moderation specific creator for table.
     *
     * @param boolean $allowModerationSpecificCreatorForTable
     *
     * @return void
     */
    public function setAllowModerationSpecificCreatorForTable($allowModerationSpecificCreatorForTable)
    {
        if (boolval($this->allowModerationSpecificCreatorForTable) !== boolval($allowModerationSpecificCreatorForTable)) {
            $this->allowModerationSpecificCreatorForTable = boolval($allowModerationSpecificCreatorForTable);
        }
    }
    
    /**
     * Returns the allow moderation specific creation date for table.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreationDateForTable()
    {
        return $this->allowModerationSpecificCreationDateForTable;
    }
    
    /**
     * Sets the allow moderation specific creation date for table.
     *
     * @param boolean $allowModerationSpecificCreationDateForTable
     *
     * @return void
     */
    public function setAllowModerationSpecificCreationDateForTable($allowModerationSpecificCreationDateForTable)
    {
        if (boolval($this->allowModerationSpecificCreationDateForTable) !== boolval($allowModerationSpecificCreationDateForTable)) {
            $this->allowModerationSpecificCreationDateForTable = boolval($allowModerationSpecificCreationDateForTable);
        }
    }
    
    /**
     * Returns the allow moderation specific creator for database.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreatorForDatabase()
    {
        return $this->allowModerationSpecificCreatorForDatabase;
    }
    
    /**
     * Sets the allow moderation specific creator for database.
     *
     * @param boolean $allowModerationSpecificCreatorForDatabase
     *
     * @return void
     */
    public function setAllowModerationSpecificCreatorForDatabase($allowModerationSpecificCreatorForDatabase)
    {
        if (boolval($this->allowModerationSpecificCreatorForDatabase) !== boolval($allowModerationSpecificCreatorForDatabase)) {
            $this->allowModerationSpecificCreatorForDatabase = boolval($allowModerationSpecificCreatorForDatabase);
        }
    }
    
    /**
     * Returns the allow moderation specific creation date for database.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreationDateForDatabase()
    {
        return $this->allowModerationSpecificCreationDateForDatabase;
    }
    
    /**
     * Sets the allow moderation specific creation date for database.
     *
     * @param boolean $allowModerationSpecificCreationDateForDatabase
     *
     * @return void
     */
    public function setAllowModerationSpecificCreationDateForDatabase($allowModerationSpecificCreationDateForDatabase)
    {
        if (boolval($this->allowModerationSpecificCreationDateForDatabase) !== boolval($allowModerationSpecificCreationDateForDatabase)) {
            $this->allowModerationSpecificCreationDateForDatabase = boolval($allowModerationSpecificCreationDateForDatabase);
        }
    }
    
    /**
     * Returns the allow moderation specific creator for field.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreatorForField()
    {
        return $this->allowModerationSpecificCreatorForField;
    }
    
    /**
     * Sets the allow moderation specific creator for field.
     *
     * @param boolean $allowModerationSpecificCreatorForField
     *
     * @return void
     */
    public function setAllowModerationSpecificCreatorForField($allowModerationSpecificCreatorForField)
    {
        if (boolval($this->allowModerationSpecificCreatorForField) !== boolval($allowModerationSpecificCreatorForField)) {
            $this->allowModerationSpecificCreatorForField = boolval($allowModerationSpecificCreatorForField);
        }
    }
    
    /**
     * Returns the allow moderation specific creation date for field.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreationDateForField()
    {
        return $this->allowModerationSpecificCreationDateForField;
    }
    
    /**
     * Sets the allow moderation specific creation date for field.
     *
     * @param boolean $allowModerationSpecificCreationDateForField
     *
     * @return void
     */
    public function setAllowModerationSpecificCreationDateForField($allowModerationSpecificCreationDateForField)
    {
        if (boolval($this->allowModerationSpecificCreationDateForField) !== boolval($allowModerationSpecificCreationDateForField)) {
            $this->allowModerationSpecificCreationDateForField = boolval($allowModerationSpecificCreationDateForField);
        }
    }
    
    
    /**
     * Loads module variables from the database.
     */
    protected function load()
    {
        $moduleVars = $this->variableApi->getAll('MUTransportModule');
    
        if (isset($moduleVars['tableEntriesPerPage'])) {
            $this->setTableEntriesPerPage($moduleVars['tableEntriesPerPage']);
        }
        if (isset($moduleVars['databaseEntriesPerPage'])) {
            $this->setDatabaseEntriesPerPage($moduleVars['databaseEntriesPerPage']);
        }
        if (isset($moduleVars['fieldEntriesPerPage'])) {
            $this->setFieldEntriesPerPage($moduleVars['fieldEntriesPerPage']);
        }
        if (isset($moduleVars['showOnlyOwnEntries'])) {
            $this->setShowOnlyOwnEntries($moduleVars['showOnlyOwnEntries']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForTable'])) {
            $this->setAllowModerationSpecificCreatorForTable($moduleVars['allowModerationSpecificCreatorForTable']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForTable'])) {
            $this->setAllowModerationSpecificCreationDateForTable($moduleVars['allowModerationSpecificCreationDateForTable']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForDatabase'])) {
            $this->setAllowModerationSpecificCreatorForDatabase($moduleVars['allowModerationSpecificCreatorForDatabase']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForDatabase'])) {
            $this->setAllowModerationSpecificCreationDateForDatabase($moduleVars['allowModerationSpecificCreationDateForDatabase']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForField'])) {
            $this->setAllowModerationSpecificCreatorForField($moduleVars['allowModerationSpecificCreatorForField']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForField'])) {
            $this->setAllowModerationSpecificCreationDateForField($moduleVars['allowModerationSpecificCreationDateForField']);
        }
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save()
    {
        $this->variableApi->set('MUTransportModule', 'tableEntriesPerPage', $this->getTableEntriesPerPage());
        $this->variableApi->set('MUTransportModule', 'databaseEntriesPerPage', $this->getDatabaseEntriesPerPage());
        $this->variableApi->set('MUTransportModule', 'fieldEntriesPerPage', $this->getFieldEntriesPerPage());
        $this->variableApi->set('MUTransportModule', 'showOnlyOwnEntries', $this->getShowOnlyOwnEntries());
        $this->variableApi->set('MUTransportModule', 'allowModerationSpecificCreatorForTable', $this->getAllowModerationSpecificCreatorForTable());
        $this->variableApi->set('MUTransportModule', 'allowModerationSpecificCreationDateForTable', $this->getAllowModerationSpecificCreationDateForTable());
        $this->variableApi->set('MUTransportModule', 'allowModerationSpecificCreatorForDatabase', $this->getAllowModerationSpecificCreatorForDatabase());
        $this->variableApi->set('MUTransportModule', 'allowModerationSpecificCreationDateForDatabase', $this->getAllowModerationSpecificCreationDateForDatabase());
        $this->variableApi->set('MUTransportModule', 'allowModerationSpecificCreatorForField', $this->getAllowModerationSpecificCreatorForField());
        $this->variableApi->set('MUTransportModule', 'allowModerationSpecificCreationDateForField', $this->getAllowModerationSpecificCreationDateForField());
    }
}
